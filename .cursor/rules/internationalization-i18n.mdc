---
description: Localizzazione Multilingua
globs: 
alwaysApply: false
---
# Localizzazione Multilingua - Portfolio Alice Mandelli

## Struttura Chiavi i18n

### Convenzioni Naming
- Usa notazione a punti: `sezione.sottosezione.nome`
- Namespace per sezioni: `hero`, `nav`, `services`, `portfolio`, `contact`, `footer`
- Chiavi descrittive e contestualizzate
- Riutilizza chiavi per stringhe duplicate

### Esempi Struttura
```json
{
  "hero": {
    "title": "Alice Mandelli",
    "subtitle": "Web Designer & UI Developer",
    "cta": "Scopri i miei lavori"
  },
  "nav": {
    "home": "Home",
    "about": "Chi sono",
    "portfolio": "Portfolio",
    "contact": "Contatti"
  },
  "services": {
    "title": "I miei servizi",
    "items": {
      "webdesign": "Web Design",
      "uidevelopment": "UI Development",
      "branding": "Branding"
    }
  }
}
```

## Implementazione Vue 3

### Composables i18n
```typescript
// useI18n.ts
import { useI18n } from 'vue-i18n'
import { computed } from 'vue'

export function useLocalization() {
  const { t, locale, availableLocales } = useI18n()
  
  const currentLanguage = computed(() => locale.value)
  const isRTL = computed(() => ['ar', 'he'].includes(locale.value))
  
  const switchLanguage = (lang: string) => {
    locale.value = lang
    document.documentElement.lang = lang
    document.documentElement.dir = isRTL.value ? 'rtl' : 'ltr'
  }
  
  return {
    t,
    currentLanguage,
    availableLocales,
    isRTL,
    switchLanguage
  }
}
```

### Componenti con i18n
```vue
<template>
  <div class="hero-section">
    <h1>{{ t('hero.title') }}</h1>
    <p>{{ t('hero.subtitle') }}</p>
    <button @click="handleCTA">
      {{ t('hero.cta') }}
    </button>
  </div>
</template>

<script setup lang="ts">
import { useLocalization } from '@/composables/useI18n'

const { t } = useLocalization()

const handleCTA = () => {
  // Logica CTA
}
</script>
```

## Lingue Supportate

### Italiano (it) - Default
- Lingua principale del portfolio
- Contenuti completi e ottimizzati
- SEO locale per mercato italiano

### Inglese (en) - International
- Traduzione completa per mercato globale
- Terminologia tecnica standardizzata
- SEO internazionale

### Spagnolo (es) - Expansion
- Traduzione per mercato ispanico
- Adattamento culturale appropriato
- SEO per mercati spagnoli

## Best Practices

### Type Safety
```typescript
// types/i18n.ts
export type TranslationKeys = 
  | 'hero.title'
  | 'hero.subtitle'
  | 'nav.home'
  | 'services.title'
  // ... tutte le chiavi

declare module 'vue-i18n' {
  interface DefineLocaleMessage {
    [K in TranslationKeys]: string
  }
}
```

### Pluralizzazione
```json
{
  "portfolio": {
    "projects": "{{ count }} progetto",
    "projects_plural": "{{ count }} progetti"
  }
}
```

### Interpolazione Parametri
```json
{
  "contact": {
    "welcome": "Ciao {{ name }}, benvenuto nel mio portfolio!"
  }
}
```

## File di Traduzione

### Struttura Directory
```
src/i18n/
├── index.ts
├── locales/
│   ├── it.json
│   ├── en.json
│   └── es.json
└── types/
    └── i18n.ts
```

### Contenuto File
- Tutte le stringhe visibili all'utente
- Placeholder, errori, messaggi di successo
- Menu, footer, form labels
- CTA e call-to-action
- Meta descriptions per SEO

## SEO e Meta Tags

### Meta Tags Dinamici
```vue
<script setup lang="ts">
import { useLocalization } from '@/composables/useI18n'
import { useHead } from '@vueuse/head'

const { t, currentLanguage } = useLocalization()

useHead({
  title: t('meta.title'),
  meta: [
    { name: 'description', content: t('meta.description') },
    { property: 'og:title', content: t('meta.ogTitle') },
    { property: 'og:description', content: t('meta.ogDescription') }
  ],
  htmlAttrs: {
    lang: currentLanguage.value
  }
})
</script>
```

## Accessibilità i18n

### Screen Reader Support
- Tutte le traduzioni accessibili via screen reader
- Annunci dinamici per cambio lingua
- Live regions per contenuti aggiornati

### RTL Support
- Layout automatico per lingue RTL
- CSS logical properties
- Icone e immagini specchiate quando necessario

## Performance

### Lazy Loading Traduzioni
```typescript
// Caricamento asincrono delle traduzioni
const messages = {
  it: () => import('./locales/it.json'),
  en: () => import('./locales/en.json'),
  es: () => import('./locales/es.json')
}
```

### Bundle Optimization
- Code splitting per file di traduzione
- Tree shaking per chiavi non utilizzate
- Compressione JSON per produzione

## Rimandi

- [i18n/index.ts](mdc:src/i18n/index.ts)
- [i18n/locales/it.json](mdc:src/i18n/locales/it.json)
- [i18n/locales/en.json](mdc:src/i18n/locales/en.json)
- [i18n/locales/es.json](mdc:src/i18n/locales/es.json)
- [composables/useI18n.ts](mdc:src/composables/useI18n.ts)

