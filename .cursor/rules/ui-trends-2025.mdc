---
description: 
globs: *.vue, *.jsx, *.tsx, *.css
alwaysApply: false
---

# UI Trends 2025 - Design Patterns Moderni

## Bento Grid Layouts

### Implementazione Modulare
- Utilizza **CSS Grid** per creare layout Bento Grid responsivi
- Definisci blocchi con dimensioni variabili: `large`, `medium`, `small`
- Implementa `grid-template-areas` per layout semantici
- Mantieni consistenza negli spacing tra blocchi (16px, 24px, 32px)

```css
.bento-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: var(--spacing-md);
  grid-auto-rows: minmax(200px, auto);
}

.bento-item {
  border-radius: var(--radius-lg);
  padding: var(--spacing-lg);
  transition: transform var(--duration-md) var(--easing-bounce);
}

.bento-item--large {
  grid-column: span 2;
  grid-row: span 2;
}
```

### Best Practice Bento Grid
- Priorità visiva: contenuti importanti in blocchi più grandi
- Gerarchia cromatica: usa variazioni di colore per guidare l'attenzione
- Responsività: adatta la struttura della griglia ai breakpoint
- Accessibilità: mantieni ordine logico di lettura nel DOM

## UFO Elements (Unexpected Floating Objects)

### Elementi Fluttuanti Dinamici
- Implementa elementi fluttuanti che non compromettano l'usabilità
- Usa `position: absolute` con `z-index` controllati
- Applica animazioni subtle con `transform` e `opacity`
- Considera il `prefers-reduced-motion` per l'accessibilità

```vue
<template>
  <div class="ufo-container">
    <div 
      class="ufo-element"
      :style="{ 
        '--x': randomX + 'px', 
        '--y': randomY + 'px',
        '--delay': randomDelay + 'ms'
      }"
    >
      <slot />
    </div>
  </div>
</template>

<style scoped>
.ufo-element {
  position: absolute;
  transform: translate(var(--x), var(--y));
  animation: float var(--duration-slow) var(--easing-smooth) infinite;
  animation-delay: var(--delay);
}

@media (prefers-reduced-motion: reduce) {
  .ufo-element {
    animation: none;
    transform: none;
  }
}
</style>
```

## Micro-Animazioni e Interazioni

### Scroll-Triggered Animations
- Utilizza `Intersection Observer API` per performance ottimali
- Implementa animazioni che si attivano al 20-30% di visibilità dell'elemento
- Crea sequenze di animazione progressive per storytelling visivo

```javascript
// Composable per scroll-triggered animations
export function useScrollAnimation(threshold = 0.2) {
  const target = ref(null)
  const isVisible = ref(false)
  
  onMounted(() => {
    if (!target.value) return
    
    const observer = new IntersectionObserver(
      ([entry]) => {
        isVisible.value = entry.isIntersecting
      },
      { threshold }
    )
    
    observer.observe(target.value)
    
    onUnmounted(() => observer.disconnect())
  })
  
  return { target, isVisible }
}
```

### Magnetic Hover Effects
- Implementa effetti magnetici con calcolo della posizione del mouse
- Usa `transform: translate3d()` per performance hardware-accelerated
- Applica easing personalizzato per movimento naturale

```css
.magnetic-element {
  transition: transform var(--duration-sm) var(--easing-bounce);
  cursor: pointer;
}

.magnetic-element:hover {
  transform: translate3d(var(--mouse-x), var(--mouse-y), 0) scale(1.05);
}
```

## Tipografia Cinetica

### Animazioni Testuali Avanzate
- Implementa animazioni che si attivano al focus o hover
- Usa `@keyframes` per creare effetti di morphing testuale
- Mantieni leggibilità durante le transizioni

```css
.kinetic-text {
  display: inline-block;
  transition: all var(--duration-md) var(--easing-smooth);
}

.kinetic-text:hover .char {
  animation: charBounce var(--duration-sm) var(--easing-bounce);
  animation-delay: calc(var(--char-index) * 50ms);
}

@keyframes charBounce {
  0%, 100% { transform: translateY(0); }
  50% { transform: translateY(-8px); }
}
```

## Layout e Composition Rules

### Spatial Hierarchy
- Usa variazioni di dimensione per creare gerarchia visiva
- Implementa spacing sistemico basato su multipli di 8px
- Crea ritmo visivo alternando elementi pieni e vuoti

### Color & Contrast
- Implementa palette estesa con supporto P3 color gamut
- Usa variazioni tonali per creare depth nei layout Bento
- Mantieni contrasto WCAG AA compliant (4.5:1 minimum)

### Responsive Behavior
- Priorità mobile-first per layout Bento Grid
- Implementa breakpoint semantici: `mobile`, `tablet`, `desktop`, `wide`
- Usa `clamp()` per sizing fluido e responsive

## Performance Considerations

### Animation Performance
- Usa `transform` e `opacity` per animazioni GPU-accelerated
- Implementa `will-change` solo quando necessario
- Rimuovi `will-change` dopo l'animazione per ottimizzare memoria

### Layout Thrashing Prevention
- Evita animazioni di proprietà che causano reflow
- Usa `transform: translateZ(0)` per creare layer compositore
- Implementa debouncing per eventi scroll-based

## Testing e Validation

### Visual Regression Testing
- Testa layout Bento Grid su diversi viewport
- Verifica animazioni con `prefers-reduced-motion`
- Valida contrasto colori con strumenti automatici

### Performance Auditing
- Monitora FPS durante animazioni complesse
- Verifica memory usage per elementi UFO
- Testa su dispositivi low-end per performance baseline