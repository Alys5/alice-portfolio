---
description: Pulizia completa del progetto per rimuovere file obsoleti, ottimizzare la struttura e migliorare la manutenibilit√†. Questa guida √® applicabile a qualsiasi progetto web moderno.
globs: 
alwaysApply: false
---
# üßπ Clean Project Rules - Guida Universale

## Obiettivo
Pulizia completa del progetto per rimuovere file obsoleti, ottimizzare la struttura e migliorare la manutenibilit√†. Questa guida √® applicabile a qualsiasi progetto web moderno.

## File da Rimuovere (Obsoleti/Vuoti)

### File Vuoti da Eliminare
- File di configurazione vuoti
- Script duplicati o non funzionali (es. `.ps1` se usi `.sh`)
- File di setup obsoleti
- Documentazione duplicata

### Cartelle Vuote da Rimuovere
- Cartelle `api/` non utilizzate
- Cartelle di store non configurate (es. `src/stores/` senza Pinia)
- Cartelle di test vuote
- Cartelle di asset non utilizzate

### File di Log Obsoleti
- Log temporanei di sviluppo
- File di backup obsoleti
- Cache files non necessari
- File di debug temporanei

## Ristrutturazione File

### Spostamenti Necessari
- Sposta esempi in `src/components/examples/` per migliore organizzazione
- Standardizza documentazione in cartella `docs/`
- Organizza README separati in documentazione strutturata
- Raggruppa script correlati

### Consolidamento Script
- Mantieni solo script necessari e funzionali
- Rimuovi duplicati cross-platform se non necessari
- Unifica script simili
- Standardizza naming convention

## Aggiornamento README.md

### Struttura Standard
```markdown
# [Nome Progetto]

[Breve descrizione del progetto]

## üöÄ Quick Start

```bash
npm install
npm run dev
```

## üìö Documentazione

- [Setup](mdc:docs/SETUP.md) - Configurazione iniziale
- [Architettura](mdc:docs/ARCHITECTURE.md) - Struttura del progetto
- [Deployment](mdc:docs/DEPLOYMENT.md) - Guida al deploy
- [Manutenzione](mdc:docs/MAINTENANCE.md) - Modalit√† manutenzione

## üõ†Ô∏è Script Disponibili

- `npm run dev` - Sviluppo locale
- `npm run build` - Build produzione
- `npm run test` - Esecuzione test
- `npm run lint` - Controllo codice
```

## Verifica Configurazioni

### TypeScript
- Verifica `tsconfig.json`, `tsconfig.app.json`, `tsconfig.node.json`
- Assicurati che non ci siano conflitti di configurazione
- Rimuovi configurazioni duplicate
- Ottimizza per il tuo use case

### ESLint
- Verifica `eslint.config.ts` o `.eslintrc.*`
- Assicurati che le regole siano coerenti
- Rimuovi configurazioni obsolete
- Aggiorna regole per best practices attuali

### Build Tool (Vite/Webpack)
- Verifica configurazione build tool
- Assicurati che tutti i plugin siano necessari
- Ottimizza la configurazione per performance
- Rimuovi plugin obsoleti

### Deployment
- Mantieni solo configurazioni necessarie
- Rimuovi configurazioni duplicate per ambienti
- Verifica che la configurazione sia ottimale
- Standardizza variabili d'ambiente

## Ottimizzazione Package.json

### Script Standard
```json
{
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build",
    "lint": "eslint . --fix",
    "lint:check": "eslint . --ext .vue,.js,.ts,.jsx,.tsx",
    "lint:fix": "eslint . --fix --ext .vue,.js,.ts,.jsx,.tsx",
    "test": "vitest",
    "test:coverage": "vitest --coverage",
    "ci:test": "npm run lint:check && npm run type-check && npm run test",
    "ci:build": "NODE_ENV=production npm run build-only",
    "clean": "rm -rf dist node_modules/.vite",
    "prepare": "husky install"
  }
}
```

### Dipendenze da Verificare
- Rimuovi dipendenze non utilizzate
- Aggiorna versioni obsolete
- Verifica compatibilit√†
- Usa `npm audit` per sicurezza

## Struttura Progetto Standard

```
project-name/
‚îú‚îÄ‚îÄ .cursor/rules/           # Regole Cursor (se applicabile)
‚îú‚îÄ‚îÄ .github/workflows/       # GitHub Actions
‚îú‚îÄ‚îÄ .husky/                  # Git hooks
‚îú‚îÄ‚îÄ docs/                    # Documentazione
‚îÇ   ‚îú‚îÄ‚îÄ SETUP.md
‚îÇ   ‚îú‚îÄ‚îÄ ARCHITECTURE.md
‚îÇ   ‚îú‚îÄ‚îÄ DEPLOYMENT.md
‚îÇ   ‚îî‚îÄ‚îÄ MAINTENANCE.md
‚îú‚îÄ‚îÄ public/                  # Asset pubblici
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ assets/             # Asset statici
‚îÇ   ‚îú‚îÄ‚îÄ components/         # Componenti
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ examples/       # Esempi componenti
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ layout/         # Layout components
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ui/            # UI components
‚îÇ   ‚îú‚îÄ‚îÄ composables/        # Composables (Vue) / Hooks (React)
‚îÇ   ‚îú‚îÄ‚îÄ i18n/              # Internazionalizzazione
‚îÇ   ‚îú‚îÄ‚îÄ router/            # Routing
‚îÇ   ‚îú‚îÄ‚îÄ styles/            # Stili
‚îÇ   ‚îî‚îÄ‚îÄ views/             # Pagine
‚îú‚îÄ‚îÄ tests/                  # Test files
‚îú‚îÄ‚îÄ .editorconfig
‚îú‚îÄ‚îÄ .gitattributes
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ .prettierrc.json
‚îú‚îÄ‚îÄ eslint.config.ts
‚îú‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ README.md              # README principale
‚îú‚îÄ‚îÄ tsconfig.json
‚îú‚îÄ‚îÄ tsconfig.app.json
‚îú‚îÄ‚îÄ tsconfig.node.json
‚îî‚îÄ‚îÄ vite.config.ts
```

## Comandi di Pulizia

### Rimozione File Obsoleti
```bash
# Rimuovi file vuoti
find . -name "*.json" -empty -delete
find . -name "*.md" -empty -delete

# Rimuovi cartelle vuote
find . -type d -empty -delete

# Rimuovi log obsoleti
find . -name "*LOG.md" -delete
find . -name "*.backup" -delete
```

### Spostamento File
```bash
# Crea cartella examples se necessaria
mkdir -p src/components/examples

# Sposta esempi
mv src/examples/* src/components/examples/ 2>/dev/null || true

# Organizza documentazione
mkdir -p docs
mv README-*.md docs/ 2>/dev/null || true

# Rimuovi cartelle vuote
rmdir src/examples/ 2>/dev/null || true
```

### Pulizia Script
```bash
# Rimuovi script duplicati
find . -name "*.ps1" -delete  # Se usi solo bash
find . -name "*.bat" -delete  # Se usi solo bash

# Rendi eseguibili gli script bash
chmod +x *.sh
```

## Verifica Finale

### Checklist
- [ ] Tutti i file obsoleti rimossi
- [ ] Cartelle vuote eliminate
- [ ] File spostati nelle posizioni corrette
- [ ] README.md aggiornato
- [ ] Configurazioni verificate e ottimizzate
- [ ] Script package.json aggiornati
- [ ] Struttura cartelle coerente
- [ ] Documentazione organizzata in docs/
- [ ] Build e lint funzionanti
- [ ] Test passano
- [ ] Deploy testato

### Test Post-Pulizia
```bash
# Verifica build
npm run build

# Verifica lint
npm run lint

# Verifica type check
npm run type-check

# Verifica test
npm run test

# Verifica deploy (se applicabile)
npm run deploy
```

## Benefici Attesi

1. **Performance**: Riduzione bundle size e tempi di build
2. **Manutenibilit√†**: Struttura pi√π chiara e organizzata
3. **Documentazione**: Centralizzata e aggiornata
4. **Configurazione**: Ottimizzata e senza conflitti
5. **Deploy**: Script semplificati e affidabili
6. **Onboarding**: Pi√π facile per nuovi sviluppatori

## Note Importanti

- Mantieni sempre backup prima della pulizia
- Verifica che tutti i riferimenti ai file spostati siano aggiornati
- Testa thoroughly dopo ogni modifica
- Documenta eventuali cambiamenti significativi
- Aggiorna .gitignore se necessario
- Adatta la struttura alle specifiche del tuo progetto
- Considera le best practices del framework utilizzato

## Framework Specifici

### Vue.js
- Organizza componenti in `src/components/`
- Usa `src/composables/` per logica riutilizzabile
- Mantieni `src/views/` per le pagine

### React
- Organizza componenti in `src/components/`
- Usa `src/hooks/` per custom hooks
- Mantieni `src/pages/` per le pagine

### Angular
- Organizza in moduli e componenti
- Mantieni `src/app/` come entry point
- Usa `src/shared/` per componenti condivisi

## Adattamento per Progetti Specifici

Personalizza questa guida in base a:
- Framework utilizzato
- Dimensioni del progetto
- Requisiti di team
- Standard aziendali
- Tool di build specifici


