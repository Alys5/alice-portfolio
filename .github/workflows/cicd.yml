name: CI/CD Pipeline - Alice Mandelli Portfolio

# Trigger del workflow
on:
  # Push su branch main
  push:
    branches: [main, master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'

  # Pull request su main
  pull_request:
    branches: [main, master]

  # Schedule: ogni giorno alle 18:00 (CET)
  schedule:
    - cron: '0 18 * * 1-5' # Lunedì-Venerdì alle 18:00

  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente di deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: 'Forza deploy anche senza modifiche'
        required: false
        default: false
        type: boolean

# Variabili d'ambiente globali
env:
  NODE_VERSION: '20'
  NPM_CACHE_FOLDER: ~/.npm
  NODE_MODULES_CACHE_FOLDER: ~/.npm

# Jobs del workflow
jobs:
  # Job di test e linting
  test-and-lint:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Per accesso completo al history git

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm cache verify

      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Eseguendo ESLint con regole Alice-Mandelli..."
          npx eslint . --ext .vue,.js,.ts,.jsx,.tsx --format=compact

      - name: 🔧 Fix ESLint errors
        run: |
          echo "🔧 Correggendo errori ESLint automaticamente..."
          npx eslint . --fix --ext .vue,.js,.ts,.jsx,.tsx || true

      - name: 📝 TypeScript check
        run: |
          echo "📝 Verificando TypeScript..."
          npm run type-check

      - name: 🧪 Run tests (if available)
        run: |
          if npm run test 2>/dev/null; then
            echo "✅ Tests passed"
          else
            echo "⚠️  No tests configured"
          fi
        continue-on-error: true

  # Job di build
  build:
    name: 🔨 Build Production
    runs-on: ubuntu-latest
    needs: test-and-lint
    outputs:
      build-time: ${{ steps.build-info.outputs.build-time }}
      bundle-size: ${{ steps.build-info.outputs.bundle-size }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔨 Build production bundle
        id: build-info
        run: |
          echo "🔨 Building production bundle..."
          start_time=$(date +%s)
          NODE_ENV=production npm run build
          end_time=$(date +%s)
          build_time=$((end_time - start_time))
          echo "build-time=$build_time" >> $GITHUB_OUTPUT

          if [ -d "dist" ]; then
            bundle_size=$(du -sh dist | cut -f1)
            echo "bundle-size=$bundle_size" >> $GITHUB_OUTPUT
            echo "Bundle size: $bundle_size"
            echo "Files in dist:"
            find dist -type f -exec ls -lh {} \;
          fi

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 7

  # Job di deploy
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    outputs:
      deploy-url: ${{ steps.deploy.outputs.url }}
      deploy-time: ${{ steps.deploy-info.outputs.deploy-time }}

    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 🔨 Build for deployment
        run: |
          echo "🔨 Building for deployment..."
          NODE_ENV=production npm run build

      - name: 🚀 Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: 📋 Deploy summary
        id: deploy-info
        run: |
          echo "🚀 Deploy completato!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

          # Calcola tempo di deploy
          deploy_time=$(date +%s)
          echo "deploy-time=$deploy_time" >> $GITHUB_OUTPUT

  # Job di notifiche
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test-and-lint, build, deploy]
    if: always()

    steps:
      - name: 📢 Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ CI/CD Pipeline completata con successo!"
          echo "🎉 Alice Mandelli Portfolio deployato su Vercel"
          echo "🔗 URL: ${{ needs.deploy.outputs.deploy-url || 'N/A' }}"
          echo "📅 Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: 📢 Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline fallita!"
          echo "🔍 Controlla i log per dettagli"
          echo "📅 Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: 📊 Performance report
        if: needs.deploy.result == 'success'
        run: |
          echo "📊 Performance Report:"
          echo "- Build time: ${{ needs.build.outputs.build-time || 'N/A' }}s"
          echo "- Bundle size: ${{ needs.build.outputs.bundle-size || 'N/A' }}"
          echo "- Deploy time: ${{ needs.deploy.outputs.deploy-time || 'N/A' }}s"
