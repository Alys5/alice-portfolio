name: Performance Monitoring - Alice Mandelli Portfolio

# Trigger del workflow
on:
  # Push su branch main
  push:
    branches: [main, master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'

  # Pull request su main
  pull_request:
    branches: [main, master]

  # Schedule: ogni settimana il lunedì alle 9:00 (CET)
  schedule:
    - cron: '0 9 * * 1' # Lunedì alle 9:00

  # Manual trigger
  workflow_dispatch:
    inputs:
      url:
        description: 'URL da testare'
        required: false
        default: 'https://alice-mandelli-portfolio.vercel.app'
      lighthouse_flags:
        description: 'Flag Lighthouse'
        required: false
        default: '--chrome-flags="--headless --no-sandbox --disable-dev-shm-usage"'

# Variabili d'ambiente globali
env:
  NODE_VERSION: '20'
  LIGHTHOUSE_CI_VERSION: 'v12.0.0'

# Jobs del workflow
jobs:
  # Job di analisi performance
  performance-audit:
    name: 📊 Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: |
          npm ci --prefer-offline
          npm install -g lighthouse-ci@${{ env.LIGHTHOUSE_CI_VERSION }}

      - name: 🔨 Build for testing
        run: |
          echo "🔨 Building for performance testing..."
          NODE_ENV=production npm run build

      - name: 🚀 Serve build locally
        run: |
          echo "🚀 Starting local server for testing..."
          npx serve dist -l 3000 &
          sleep 10 # Attendi che il server sia pronto

      - name: 📊 Run Lighthouse CI
        run: |
          echo "📊 Eseguendo audit performance con Lighthouse..."

          # Configura Lighthouse CI
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "url": ["http://localhost:3000"],
                "startServerCommand": "npx serve dist -l 3000",
                "startServerReadyPattern": "Serving!",
                "startServerReadyTimeout": 10000
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.8}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.8}],
                  "first-contentful-paint": ["warn", {"maxNumericValue": 2000}],
                  "largest-contentful-paint": ["warn", {"maxNumericValue": 2500}],
                  "cumulative-layout-shift": ["warn", {"maxNumericValue": 0.1}],
                  "total-blocking-time": ["warn", {"maxNumericValue": 300}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

          # Esegui Lighthouse CI
          lhci autorun

      - name: 📈 Performance Report
        if: always()
        run: |
          echo "📈 Performance Report Summary:"
          echo "=================================="

          if [ -f ".lighthouseci/manifest.json" ]; then
            echo "✅ Lighthouse audit completato"
            echo "📁 Report salvati in .lighthouseci/"
            
            # Mostra metriche principali
            if [ -f ".lighthouseci/lhr/0-0.json" ]; then
              echo "📊 Metriche principali:"
              cat .lighthouseci/lhr/0-0.json | jq -r '
                "Performance: " + (.categories.performance.score * 100 | floor | tostring + "%") + 
                " | Accessibility: " + (.categories.accessibility.score * 100 | floor | tostring + "%") + 
                " | Best Practices: " + (.categories."best-practices".score * 100 | floor | tostring + "%") + 
                " | SEO: " + (.categories.seo.score * 100 | floor | tostring + "%")
              ' || echo "⚠️  Impossibile leggere le metriche"
            fi
          else
            echo "❌ Lighthouse audit fallito"
          fi

      - name: 💾 Upload performance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: .lighthouseci/
          retention-days: 30

  # Job di analisi bundle
  bundle-analysis:
    name: 📦 Bundle Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline

      - name: 📊 Analyze bundle size
        run: |
          echo "📊 Analizzando bundle size..."

          # Build con analisi
          npm run build

          if [ -d "dist" ]; then
            echo "📦 Bundle Analysis Report:"
            echo "=========================="
            
            # Dimensione totale
            total_size=$(du -sh dist | cut -f1)
            echo "📁 Total bundle size: $total_size"
            
            # File più grandi
            echo "📋 Largest files:"
            find dist -type f -name "*.js" -o -name "*.css" | xargs ls -lh | sort -k5 -hr | head -10
            
            # Analisi per tipo
            echo "📊 Breakdown by type:"
            echo "JS files: $(find dist -name "*.js" | wc -l) files"
            echo "CSS files: $(find dist -name "*.css" | wc -l) files"
            echo "Assets: $(find dist -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "*.webp" | wc -l) files"
            
            # Gzip size estimation
            echo "🗜️  Gzip estimation:"
            find dist -type f -name "*.js" -o -name "*.css" | xargs gzip -c | wc -c | awk '{print "Estimated gzip size: " $1/1024 " KB"}'
          fi

      - name: 💾 Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/
          retention-days: 7

  # Job di notifiche performance
  performance-notify:
    name: 📢 Performance Notifications
    runs-on: ubuntu-latest
    needs: [performance-audit, bundle-analysis]
    if: always()

    steps:
      - name: 📢 Performance summary
        run: |
          echo "📊 Performance Monitoring Summary"
          echo "================================="
          echo "📅 Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "🔗 Repository: ${{ github.repository }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo "📝 Commit: ${{ github.sha }}"

          if [ "${{ needs.performance-audit.result }}" == "success" ]; then
            echo "✅ Performance audit: PASSED"
          else
            echo "❌ Performance audit: FAILED"
          fi

          if [ "${{ needs.bundle-analysis.result }}" == "success" ]; then
            echo "✅ Bundle analysis: PASSED"
          else
            echo "❌ Bundle analysis: FAILED"
          fi

          echo ""
          echo "📋 Next steps:"
          echo "- Review performance reports in artifacts"
          echo "- Optimize bundle size if needed"
          echo "- Check Core Web Vitals scores"
          echo "- Monitor real user metrics"
