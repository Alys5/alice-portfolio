#!/usr/bin/env node

/**
 * Script per testare l'accessibilit√† localmente durante lo sviluppo
 * Esegue test rapidi senza build completa
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üöÄ Avvio test di accessibilit√† locale...\n');

// Funzione per eseguire comandi
function runCommand(command, args = [], options = {}) {
    return new Promise((resolve, reject) => {
        const child = spawn(command, args, {
            stdio: 'inherit',
            shell: true,
            ...options
        });

        child.on('close', (code) => {
            if (code === 0) {
                resolve();
            } else {
                reject(new Error(`Command failed with code ${code}`));
            }
        });

        child.on('error', (error) => {
            reject(error);
        });
    });
}

// Funzione principale
async function runLocalAccessibilityTests() {
    try {
        // 1. Verifica che il server di sviluppo sia in esecuzione
        console.log('üìã Verifica server di sviluppo...');

        try {
            await runCommand('curl', ['-s', 'http://localhost:5173'], { stdio: 'pipe' });
            console.log('‚úÖ Server di sviluppo attivo su http://localhost:5173\n');
        } catch (error) {
            console.log('‚ö†Ô∏è  Server di sviluppo non attivo');
            console.log('üí° Avvia il server con: npm run dev\n');
            return;
        }

        // 2. Test rapido con axe-core (se disponibile)
        console.log('üîç Test rapido axe-core...');

        try {
            // Crea un test rapido con Puppeteer o Playwright se disponibile
            console.log('üìù Per test completi, esegui: npm run test:accessibility');
            console.log('üìù Per test Lighthouse: npm run test:lighthouse\n');
        } catch (error) {
            console.log('‚ö†Ô∏è  Test axe-core non disponibili in modalit√† sviluppo');
        }

        // 3. Controlli manuali suggeriti
        console.log('üîß Controlli manuali suggeriti:');
        console.log('   ‚Ä¢ Navigazione con tastiera (Tab, Shift+Tab, Enter, Space)');
        console.log('   ‚Ä¢ Screen reader (NVDA, VoiceOver, JAWS)');
        console.log('   ‚Ä¢ Contrasto colori (DevTools ‚Üí Lighthouse ‚Üí Accessibility)');
        console.log('   ‚Ä¢ Focus indicators (DevTools ‚Üí Elements ‚Üí :focus-visible)');
        console.log('   ‚Ä¢ Alt text immagini (DevTools ‚Üí Elements ‚Üí img)');
        console.log('   ‚Ä¢ Heading structure (DevTools ‚Üí Elements ‚Üí h1-h6)');
        console.log('   ‚Ä¢ ARIA labels (DevTools ‚Üí Elements ‚Üí aria-*)');
        console.log('   ‚Ä¢ Skip links (primo elemento focusabile)');
        console.log('   ‚Ä¢ Live regions (per contenuti dinamici)');
        console.log('   ‚Ä¢ Reduced motion (prefers-reduced-motion: reduce)');
        console.log('   ‚Ä¢ High contrast (prefers-contrast: high)');
        console.log('   ‚Ä¢ Dark mode (prefers-color-scheme: dark)\n');

        // 4. Strumenti browser suggeriti
        console.log('üõ†Ô∏è  Strumenti browser per test accessibilit√†:');
        console.log('   ‚Ä¢ Chrome: DevTools ‚Üí Lighthouse ‚Üí Accessibility');
        console.log('   ‚Ä¢ Firefox: DevTools ‚Üí Accessibility');
        console.log('   ‚Ä¢ Safari: Web Inspector ‚Üí Accessibility');
        console.log('   ‚Ä¢ Edge: DevTools ‚Üí Lighthouse ‚Üí Accessibility\n');

        // 5. Estensioni browser suggerite
        console.log('üîå Estensioni browser consigliate:');
        console.log('   ‚Ä¢ axe DevTools (Chrome, Firefox, Edge)');
        console.log('   ‚Ä¢ WAVE (Web Accessibility Evaluation Tool)');
        console.log('   ‚Ä¢ Color Contrast Analyzer');
        console.log('   ‚Ä¢ HeadingsMap');
        console.log('   ‚Ä¢ NoCoffee (simulazione problemi visivi)\n');

        // 6. Test automatici completi
        console.log('üöÄ Per test automatici completi:');
        console.log('   npm run build && npm run test:accessibility');
        console.log('   npm run test:lighthouse\n');

        console.log('‚úÖ Test di accessibilit√† locale completati!');
        console.log('üìñ Documentazione: docs/accessibility-testing.md');

    } catch (error) {
        console.error('‚ùå Errore durante i test:', error.message);
        process.exit(1);
    }
}

// Esegui se chiamato direttamente
if (import.meta.url === `file://${process.argv[1]}`) {
    runLocalAccessibilityTests().catch(error => {
        console.error('‚ùå Errore fatale:', error);
        process.exit(1);
    });
}

export { runLocalAccessibilityTests };
